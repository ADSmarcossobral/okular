TODO - branch version
Legend:
    ADD - ADDed
    CHG - CHanGed
    FIX - FIXed
    MRG - MeRGed from head
    (*) - Some parts of this item are already done

In progress:
-> Dom for bookmarks and saving/loading document settings.
-> Fix threaded generation. It's.. crashy..

Urgent fixes and items to get ready before 3.4 (special high-priority list):
-> FIX 1/2: sync Memory Management (in Document) with the Generator (exp. undoing requests) (may Segfault!)
-> FIX 2/2: check for removing 'canUnloadPixmap' from observers in place of requesting
   a list of visible pixmaps
-> FIX: priorities for requests (pageview regular over thumbnails regular over pv preloading ...)
-> FIX: linearize memory pages map iterators in respect to time
-> ADD: preloading (very easy, but change request a little)
-> FIX: check for removing 'canUnloadPixmap' from observers in place of a requested
   'visiblity list'
-> FIX: viewport changes the right way when clicking links and TOC items (also
   suggested by Mikolaj Machowski). Create a great viewport definition and merge
   it inside the synopsis too. [60% done]
-> link thumbnails view with document [first, the 'Viewport' must be defined]

More items (first items will enter 'In progress list' first):
-> move toolbar view actions in the PageView instead of the part. maybe.. or not...
-> usability: layout 2PPV [1 2,3 4,5 6] -> [1,2 3,4 5]. add option for 'ebook' style alignment. (by Mikolaj)
-> usability: trigger redraw on 'filter text' on current page (by Mikolaj)
-> watch out for FIXMEs in code
-> fix: requestPixmaps not triggered when exiting fullscreen mode (to verify..I can't reproduce)
-> fix: iterate from older pages to newest ones when freeing memory (not randomly)
-> fix: On continous view mode, if you click to a link that moves you to another
   page, then scroll up and click again on the same link it does not work. (by Albert)
-> display current page / total pages (with analog indicator too (progressbar/...))
   maybe this can be done on a small widget at the top of the toolbox, displaying
   'document' informations (pages, current pg, some metadata, etc..).
   Tested a 16px ktoolbar in the left-bottom corner.. looks goos and can be used to
   insert some actions that aren't so useful in the main (and bigger) toolbar
-> abstract TextPage generation (the last xpdf dependant class!). then go dancing in the
   streets.
-> Dom framework to cache document metadata. It should archive those types of data:
   (NOTE: already Dom'ed object is marked with 'X')
   - <X> Synopsis will go there after 1st generation (so we can edit it too)
   - <X> Document info (after the 1st gen)
   - <X - in progress> Bookmarked pages
   - Edited pages (rotated/with_data for example)
   - Overlay editing (hilighting/notations/etc..)
   - Presentation related overrides (FS mode, individual / global transitions)
   - ..more stuff.. but this isn't a problem, since a QDom is flexible by design
   The Object will reside into the Document and must not be accessible by Oservers in
   a direct way. Dom format, relations to other classes and accessing must be specified
   in a separated diagram or text file.
-> right click and drag while in 'scroll' mode changes to 'selection' mode and selects
-> add kpdf manual in PDF format loaded on the first startup or on menu->help->manual
   this visually explains basic usage, mouse buttons functions & more..
-> take care of TODOs in code
-> find: scroll page if the the searched string is not visible [after 'viewport changes']
-> ADD: click over image allows "save image" [60% done]
-> screen editing (annotations): framework (BR67300,BR62793)
-> screen editing (annotations): tools (BR67300)
-> ADD: bookmark support, with clip overlays or something.. and the bookmark
   widget. or maybe they should modify the thumbnail. note: bookmark property
   is already in place. Saving bookmars for a document will be cool too.
-> session support: restoring page location (BR82589)
-> export all text in plain_text/html
-> extract(export?) images (have a look at ImageOutputDev.cc and pdfimages.cc from xpdf (not in our xpdf sources))
-> text selection in wordprocessor style (very hard/impossible)
-> implement history (mainly for actionNamed)
-> history as a toolbox child (collecting DOs's setPage calls)
-> zoom: fit text (with configurable margin)
-> open gzipped (.pdf.gz?) files
-> kttsd output with menu entries. speech{document/page/selection}. (patch available - enrico)
-> kttsd alternative (1): autodetect "/dev/speech" (speechd/festival) and provide reading
-> automatic online dictionaries / translators (BR80338)
-> add OCR for building TextPages out of pure graphical (aka scanned) pages
-> merge head copyright headers (by albert)
-> wrong zoom buttons order (BR74248) (check consistancy with kdvi/kghostview/.. (not konq))
-> rotate the whole document / individual pages
-> fullscreen pdf view (presentations-like) with some gfx tools
-> incremental zoom with fast-refresh (tested but flickering!) or contour tracing
-> investigate 'Splash' lack of smoothness at low resolutions (see lines in thumbnails)
-> add search on the toc widget (a prune on type lineedit like in thumbnails widget)
-> goto 'logical' page (usually differs from pdf's page) (req. by Luca Burrelli)
-> use wallet for storing passwords of encrypted files
-> use shortcuts for next and prev page even in presenatation mode (by Tobias Koenig)
-> set a marker on the pdf file to immediately start presentation when opening it (by Tobias Koenig)
-> move some document related features from part to the document (see find, goto dialog, ...)
-> link following when in presentation mode
-> FIX: single page mode: add a little margin on pageview (top-bottom edges)

Done (newest features come first):
-> FIX: searchline back to work
-> CHG: DocumentInfo is now a DomTree and the properties dialog is dynamically generated (Tobias)
-> ADD: Presentation transitions are loaded from the pdf files as well as fullscreen state (Tobias)
-> Merged on HEAD on 2005-01-02 (The branch is frozen, development continues here)
-> FIX: Fix my update cursor FIX :-D
-> ADD: Make kpdf aware of Find and GoToPage actions
-> FIX: Update cursor correctly when a link moves to a page and the cursor is over a link on that page
-> ADD: Asyncronous PDF Generator implementation (for the user: faster UI, preloading, etc..)
-> FIX: Memory manager (free cache if needed, avoid disk swap and oom)
-> ADD: Presentation View (only the 'glitter' transition implemented for now)
-> FIX: FixPack1 [dyn_zoom repaints, initial panel width, zoom_lineedit focus proxy, searchwidget refactor{thumbs restoring on clear, buttons size, less code}, hilight bookmarked thumbnails]
-> FIX: Some fullScreen loving, if we are on fullscreen put an action on RMB menu ti get out of it, if we were on fullScreen mode on exit bring back correctly if we were also seeing toolbar or menubar
-> FIX: When in non continous mode and scrolling up a page, set the viewport at the bottom of the page (Albert)
-> ADD: Show the window maximized when the user opens the program for the very first time (Albert)
-> ADD: Use 'Generators' as providers for contents generation
-> ADD: Add properties dialog (Albert)
-> ADD: Support for show/hide menubar in rmb menu, different from HEAD so that supports Konqueror too (Albert)
-> ADD: Watch File option (Albert)
-> ADD: import Marco Martin's "another kpdf icon" (kde-look: 16146) (Albert)
-> ADD: dynamic zoom with mid mouse button (click and drag up-down to zoom in-out)
-> FIX: merge select text & select gfx, two sections on the same pop-up menu
-> ADD: reading aids (inverted display, recolor, black/white, draw link border, draw image border)
-> FIX: zoom preserved when switching modes and flickerless drawing
-> ADD: Printing as PS instead of as image (Albert)
-> ADD: Remember page on session logout and put the document in it on session restore (Albert)
-> ADD: gfx capturing tool
-> ADD: composited renderer framework (in addition to a fast light one)
-> FIX: pageview repaint done internally (speed boost and reduced memory consumption)
-> ADD: KConfigXT settings framework and Accessibility config (acc. code mostly not done)
-> FIX: workaround for scrollview bug 1/2 (painting hidden widgets under certain circumstances)
-> ADD: zoom into a rect defined by mouse (aka zoom to window)
-> FIX: sheet rotation in landscape case
-> ADD: Some dcop functions (goToPage, openDocument and give # of pages) (Albert)
-> MRG: link following ('actionMovie' kind is missing)
-> ADD: text selection (rectangular blocks) in selection mode
-> ADD: autoscroll page with Shift+Up/Dn keys (exact konqueror's behavior)
-> CHG: remake single page mode
-> FIX: zoom buttons in sync with text
-> ADD: continous mode
-> ADD: multiple pages per view (gui selects 1 or 2 ppv)
-> MRG: the option to open password protected files (from head)
-> MRG: the Table Of Contents (from head)
-> ADD: a 'search bar' with prune-as-you-type feature
-> MRG: Albert's search ported and implemented case sensitive
-> CHG: smart handling of pixmap using an Observer ID (thumbnails are gone, only pixmaps now)
-> FIX: some toolbar/menu changes
-> ADD: outline bottom and right edges (of pages)
-> FIX: centering pages in the view
-> FIX: kpdf output at 100% has exactly the same size as acroread now
-> CHG: qsplitter layouting
-> FIX: zooming works as expected (and added 'fit to page' too)
-> ADD: new go to page dialog
-> GHG: previews sorted by visible areas (prioritize items where the scrollbar is)
-> FIX: previews speedup: 50-100%
-> CHG: use local instead of X memory for thumbnails (..)
-> MRG: merge lots of kpdf_part and part (centralview) code (to simplify/clenup)
-> The branch 'kpdf_experiments' was created at this point. Code refactoring started.
-> ADD: Completely use xpdf code for rendering that solves most font problems (Albert)
-> MRG: Replace xpdf version with lastest one (3.00) that supports PDF 1.5 (Albert)

Here comes a list of suggestions from a dot post http://dot.kde.org/1095261317 and IRC:
 Tool: ruler, measure: distance, perimeter, ?area?
 Tool: color picker
 Annotations: yellow notes 'post-it' like
 Export: export to other formats keeping formatting (a dream.. except for PNG :-)
 PDF: <theICEBear> pdf forms support.... :D if at all possible
