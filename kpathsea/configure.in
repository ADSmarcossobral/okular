dnl Process this file with autoconf to produce a configure script.
AC_INIT(pathsearch.c)

AM_INIT_AUTOMAKE(kpathsea, 3.3.1)

KPSEVERSION=3.3.1
AC_SUBST(KPSEVERSION)
AC_DEFINE_UNQUOTED(KPSEVERSION, "kpathsea version $KPSEVERSION")

dnl Common Autoconf sinclude file for kpathsea-using programs.  (Have to
dnl use the m4 `sinclude' builtin instead of `include', since Autoconf
dnl disables `include'.)

dnl These configure scripts won't work with anything else.
AC_PREREQ(2.12.1)

dnl Write output here, instead of putting a zillion -D's on the command line.
AM_CONFIG_HEADER(c-auto.h)

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_FUNC_CLOSEDIR_VOID
AC_CHECK_HEADERS(assert.h float.h limits.h memory.h pwd.h stdlib.h \
                 string.h sys/param.h unistd.h)

# Unfortunately, kpathsea needs to be told at compile time where 
# the TeX directory tree resides 
AC_ARG_WITH(tex-datadir,
    [  --with-tex-datadir=DIR       where the root of texmf/web2c/texmf.cnf is installed ],
    [  datadir=$withval
    ], datadir=NO)     

echo "checking for $datadir/texmf/web2c/texmf.cnf"
if test ! -r $datadir/texmf/web2c/texmf.cnf; then
  { 
  echo "configure: error. Please use the --with-tex-datadir option to point to the main" 1>&2
  echo "directory of your TeX installation, where the file texmf/web2c/texmf.cnf" 1>&2
  echo "is found." 1>&2
  exit -1
  }
fi


dnl We would to do the klibtool stuff only in kpathsea (i.e., in
dnl kpathsea/configure.in instead of here in common.ac), but then
dnl HAVE_PUTENV etc. are not defined when compiling the programs,
dnl because <kpathsea/config.h> includes <c-auto.h> (the programs'),
dnl not <kpathsea/c-auto.h>.  Should it include both?  But then we will
dnl have many benign redefinitions that some compilers may not consider
dnl benign.  And it's a big change.
sinclude(../../texk/acklibtool.m4)
AC_ENABLE_STATIC(no)
AM_PROG_LIBTOOL
dnl If the list of functions here changes, also change acconfig.h.  */
 for ac_func in putenv strcasecmp strtol strstr
do
echo $ac_n "checking for $ac_func""... $ac_c" 1>&6
echo "configure:1430: checking for $ac_func" >&5
if eval "test \"`echo '$''{'ac_cv_func_$ac_func'+set}'`\" = set"; then
  echo $ac_n "(cached) $ac_c" 1>&6
else
  cat > conftest.$ac_ext <<EOF
#line 1435 "configure"
#include "confdefs.h"
/* System header to define __stub macros and hopefully few prototypes,
    which can conflict with char $ac_func(); below.  */
#include <assert.h>
/* Override any gcc2 internal prototype to avoid an error.  */
/* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
char $ac_func();

int main() {

/* The GNU C library defines this for functions which it implements
    to always fail with ENOSYS.  Some functions are actually named
    something starting with __ and the normal name is an alias.  */
#if defined (__stub_$ac_func) || defined (__stub___$ac_func)
choke me
#else
$ac_func();
#endif

; return 0; }
EOF
if { (eval echo configure:1458: \"$ac_link\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then
  rm -rf conftest*
  eval "ac_cv_func_$ac_func=yes"
else
  echo "configure: failed program was:" >&5
  cat conftest.$ac_ext >&5
  rm -rf conftest*
  eval "ac_cv_func_$ac_func=no"
fi
rm -f conftest*
fi

if eval "test \"`echo '$ac_cv_func_'$ac_func`\" = yes"; then
  echo "$ac_t""yes" 1>&6
    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
  cat >> confdefs.h <<EOF
#define $ac_tr_func 1
EOF
 
else
  echo "$ac_t""no" 1>&6
LTLIBOBJS="$LTLIBOBJS $ac_func.c"
fi
done

AC_SUBST(LTLIBOBJS)

AC_CHECK_FUNCS(bcmp bcopy bzero getcwd getwd index memcmp memcpy rindex strchr strrchr)

AC_C_CONST

# Check whether prototypes work.
AC_MSG_CHECKING(whether the compiler accepts prototypes)
AC_CACHE_VAL(kb_cv_c_prototypes,
[AC_TRY_COMPILE([#include <stdarg.h>], [extern void foo(int i,...);],
  kb_cv_c_prototypes=yes, kb_cv_c_prototypes=no)])dnl
AC_MSG_RESULT($kb_cv_c_prototypes)
if test "$kb_cv_c_prototypes" = yes; then
  AC_DEFINE(HAVE_PROTOTYPES)
fi

# This is a GNU libc invention.
AC_MSG_CHECKING(whether program_invocation_name is predefined)
AC_CACHE_VAL(kb_cv_var_program_inv_name,
[AC_TRY_LINK(,
  [extern char *program_invocation_name; program_invocation_name = "love";],
  kb_cv_var_program_inv_name=yes, kb_cv_var_program_inv_name=no)])dnl
AC_MSG_RESULT($kb_cv_var_program_inv_name)
if test "$kb_cv_var_program_inv_name" = yes; then
  AC_DEFINE(HAVE_PROGRAM_INVOCATION_NAME)
fi

# Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
# This test program is due to Mike Hibler <mike@cs.utah.edu>.
# We don't actually need to run this if we don't have putenv, but it
# doesn't hurt.
AC_MSG_CHECKING(whether putenv uses malloc)
AC_CACHE_VAL(kb_cv_func_putenv_malloc,
[AC_TRY_RUN([
#define VAR	"YOW_VAR"
#define STRING1 "GabbaGabbaHey"
#define STRING2 "Yow!!"		/* should be shorter than STRING1 */
extern char *getenv (); /* in case char* and int don't mix gracefully */
main ()
{
  char *str1, *rstr1, *str2, *rstr2;
  str1 = getenv (VAR);
  if (str1)
    exit (1);
  str1 = malloc (strlen (VAR) + 1 + strlen (STRING1) + 1);
  if (str1 == 0)
    exit (2);
  strcpy (str1, VAR);
  strcat (str1, "=");
  strcat (str1, STRING1);
  if (putenv (str1) < 0)
    exit (3);
  rstr1 = getenv (VAR);
  if (rstr1 == 0)
    exit (4);
  rstr1 -= strlen (VAR) + 1;
  if (strncmp (rstr1, VAR, strlen (VAR)))
    exit (5);
  str2 = malloc (strlen (VAR) + 1 + strlen (STRING2) + 1);
  if (str2 == 0 || str1 == str2)
    exit (6);
  strcpy (str2, VAR);
  strcat (str2, "=");
  strcat (str2, STRING2);
  if (putenv (str2) < 0)
    exit (7);
  rstr2 = getenv (VAR);
  if (rstr2 == 0)
    exit (8);
  rstr2 -= strlen (VAR) + 1;
#if 0
  printf ("rstr1=0x%x, rstr2=0x%x\n", rstr1, rstr2);
  /*
   * If string from first call was reused for the second call,
   * you had better not do a free on the first string!
   */
  if (rstr1 == rstr2)
          printf ("#define SMART_PUTENV\n");
  else
          printf ("#undef SMART_PUTENV\n");
#endif
  exit (rstr1 == rstr2 ? 0 : 1);
}], kb_cv_func_putenv_malloc=yes, kb_cv_func_putenv_malloc=no,
    kb_cv_func_putenv_malloc=no)])dnl
AC_MSG_RESULT($kb_cv_func_putenv_malloc)
if test $kb_cv_func_putenv_malloc = yes; then
  AC_DEFINE(SMART_PUTENV)
fi

if test $ac_cv_func_getcwd = yes; then
# We only need to run this if we have getcwd.
AC_MSG_CHECKING(whether getcwd uses fork or vfork)
AC_CACHE_VAL(kb_cv_func_getcwd_forks,
[AC_TRY_RUN([
int fork() { exit(1); }
int vfork() { exit(1); }
extern char *getcwd();
char path[100];
int main() {
getcwd(path,100);
return 0;
}], kb_cv_func_getcwd_forks=no, kb_cv_func_getcwd_forks=yes,
    kb_cv_func_getcwd_forks=no)])dnl
AC_MSG_RESULT($kb_cv_func_getcwd_forks)
if test $kb_cv_func_getcwd_forks = yes; then
  AC_DEFINE(GETCWD_FORKS)
fi
fi

# Common --with and --enable options.
sinclude(../../texk/kpathsea/withenable.ac)

# Implementation of those options.
if test "x$with_mktexmf_default" = xyes; then
  AC_DEFINE(MAKE_TEX_MF_BY_DEFAULT)
fi
if test "x$with_mktexpk_default" = xyes; then
  AC_DEFINE(MAKE_TEX_PK_BY_DEFAULT)
fi
if test "x$with_mktextex_default" = xyes; then
  AC_DEFINE(MAKE_TEX_TEX_BY_DEFAULT)
fi
if test "x$with_mktextfm_default" = xyes; then
  AC_DEFINE(MAKE_TEX_TFM_BY_DEFAULT)
fi
if test "x$with_mkocp_default" = xyes; then
  AC_DEFINE(MAKE_OMEGA_OCP_BY_DEFAULT)
fi
if test "x$with_mkofm_default" = xyes; then
  AC_DEFINE(MAKE_OMEGA_OFM_BY_DEFAULT)
fi

AC_OUTPUT(Makefile)
dnl Update stamp-auto, since we just remade `c-auto.h'.
date >stamp-auto
